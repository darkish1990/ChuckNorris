{"version":3,"sources":["Header/Header.js","CardComponent/CardComponent.js","JokeList/Jokelist.js","App.js","serviceWorker.js","index.js"],"names":["Header","jokeListCategories","clickedDemlimiter","className","to","isActive","location","pathname","map","category","key","toUpperCase","onChange","e","value","selected","disabled","hidden","Array","x","i","CardComponent","props","joke","replace","JokeList","jokes","useParams","delimiter","jokeList","allJokes","Object","keys","reduce","prev","curr","push","getAllJokes","length","slice","index","history","createBrowserHistory","App","dataVal","useState","setJokelist","setDelimiter","useEffect","fetch","then","res","json","data","cats","forEach","element","categories","sortedCats","sort","event","newDelimiter","target","exact","path","render","Boolean","window","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e20eb987.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport \"./Header.css\";\r\n\r\nconst Header = ({ jokeListCategories, clickedDemlimiter }) => {\r\n  const checkActive = location => {\r\n    if (!location) return false;\r\n    const { pathname } = location;\r\n    return pathname === \"/\";\r\n  };\r\n  return (\r\n    <>\r\n      <div className=\"header\">\r\n        <NavLink to={\"/\"} isActive={checkActive}>\r\n          All\r\n        </NavLink>\r\n        {jokeListCategories ? (\r\n          jokeListCategories.map(category => {\r\n            return (\r\n              <NavLink to={\"/\" + category} key={category}>{category.toUpperCase()}</NavLink>\r\n            );\r\n          })\r\n        ) : (\r\n          <div></div>\r\n        )}\r\n        <select onChange={e => clickedDemlimiter(e)}>\r\n          <option value=\"\" selected disabled hidden>\r\n            Pick\r\n          </option>\r\n          {[...Array(10)].map((x, i) => (\r\n            <option key={i}>{i + 1}</option>\r\n          ))}\r\n        </select>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport \"./CardComponent.css\";\r\n\r\nconst CardComponent = props => {\r\n  return (\r\n    <>\r\n      <div className=\"card\">{props.joke ? props.joke.joke.replace(/&quot;/g, '\"') : null}</div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CardComponent;\r\n","import React from \"react\";\r\nimport CardComponent from \"../CardComponent/CardComponent\";\r\nimport \"./JokeList.css\"\r\nimport { useParams } from \"react-router\";\r\n\r\nfunction getAllJokes(jokeList) {\r\n  let allJokes = [];\r\n\r\n  Object.keys(jokeList).reduce((prev, curr) => {\r\n    prev.push(...jokeList[curr]);\r\n    return prev;\r\n  }, allJokes);\r\n  return allJokes;\r\n}\r\nconst JokeList = props => {\r\n  let { category, delimiter } = useParams();\r\n  category = category || props.category;\r\n  delimiter = delimiter || props.delimiter;\r\n  let jokes;\r\n  if (!props.jokeList) return null;\r\n  if (category === \"All\") {\r\n    jokes = getAllJokes(props.jokeList);\r\n    //jokes.length = delimiter;\r\n  } else {\r\n    if (  props.jokeList[category] &&  props.jokeList[category].length > 0 &&  delimiter) {\r\n      jokes = props.jokeList[category].slice();\r\n      jokes.length = delimiter;\r\n    }\r\n    if (!jokes) {\r\n      return null;\r\n    }\r\n  }\r\n  return (\r\n    <>\r\n      <h1>{category.toUpperCase()}</h1>\r\n      {jokes.map((joke, index) => {\r\n        return <CardComponent joke={joke} key={index}></CardComponent>;\r\n      })}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default JokeList;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./App.css\";\r\nimport { Router, Route } from \"react-router-dom\";\r\nimport Header from \"./Header/Header\";\r\nimport JokeList from \"./JokeList/Jokelist\";\r\nimport { createBrowserHistory } from \"history\";\r\nconst history = createBrowserHistory();\r\n\r\nfunction App() {\r\n  const [jokeList, setJokelist] = useState({});\r\n  const [delimiter, setDelimiter] = useState(10);\r\n  let dataVal;\r\n\r\n  useEffect(() => {\r\n    fetch(`http://api.icndb.com/jokes/`).then(res =>\r\n      res.json().then(data => {\r\n        dataVal = data.value;\r\n        let cats = {};\r\n        let category;\r\n        if (dataVal) {\r\n          dataVal.forEach(element => {\r\n            category =\r\n              element.categories && element.categories.length\r\n                ? element.categories[0]\r\n                : \"none\";\r\n            cats[category] = cats[category] || [];\r\n            cats[category].push(element);\r\n          });\r\n        }\r\n        const sortedCats = {};\r\n        Object.keys(cats)\r\n          .sort()\r\n          .forEach(key => {\r\n            sortedCats[key] = cats[key];\r\n          });\r\n        setJokelist(sortedCats);\r\n      })\r\n    );\r\n  }, []);\r\n\r\n  const clickedDemlimiter = event => {\r\n    let newDelimiter = event.target.value;\r\n    if (newDelimiter) {\r\n      setDelimiter(newDelimiter);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Router history={history}>\r\n        <Header\r\n          jokeListCategories={Object.keys(jokeList)}\r\n          clickedDemlimiter={clickedDemlimiter}\r\n        />\r\n        <Route\r\n          exact\r\n          path=\"/\"\r\n          render={() => (\r\n            <JokeList\r\n              category=\"All\"\r\n              jokeList={jokeList}\r\n              delimiter={delimiter}\r\n            />\r\n          )}\r\n        />\r\n        <Route path=\"/:category\">\r\n          <JokeList jokeList={jokeList} delimiter={delimiter} />\r\n        </Route>\r\n      </Router>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}